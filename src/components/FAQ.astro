---
interface Props {
  question: string;
  answer: string;
}

const { question, answer } = Astro.props;
---

<details class="faq-item mb-6">
  <summary class="font-sans flex w-full items-center justify-between bg-white p-4 sm:p-5 text-left text-sm sm:text-base hover:bg-gray-50 cursor-pointer">
    <span class="pr-4 font-medium text-[var(--color-text)]">{question}</span>
    <span class="plus-sign text-xl sm:text-2xl flex-shrink-0 text-[var(--color-text-offset)] h-8 w-8 flex items-center justify-center rounded-full">+</span>
  </summary>
  <div class="answer bg-white">
    <p class="p-4 sm:p-6 font-sans leading-relaxed text-sm sm:text-base text-[var(--color-text)] opacity-80">
      {answer}
    </p>
  </div>
</details>

<script>
  document.querySelectorAll(".faq-item").forEach((faqItem) => {
    const summary = faqItem.querySelector('summary') as HTMLElement;
    const plusSign = summary?.querySelector(".plus-sign") as HTMLElement;

    summary?.addEventListener("click", (e) => {
      // Cerrar todas las otras preguntas
      document.querySelectorAll('.faq-item').forEach((item) => {
        if (item !== faqItem) {
          item.removeAttribute('open');
        }
      });

      // Si está abierto, prevenir el cierre inmediato y añadir la clase closing
      if (faqItem.hasAttribute("open")) {
        e.preventDefault();
        faqItem.classList.add("closing");
      }
    });

    // Cuando la animación de cierre termina
    faqItem.addEventListener("animationend", (e) => {
      const animationEvent = e as AnimationEvent;
      if (animationEvent.animationName === "close") {
        faqItem.removeAttribute("open");
        faqItem.classList.remove("closing");
      }
    });
  });
</script>

<style>
  .faq-item {
    border: 1px solid var(--color-border);
    border-radius: var(--radius-lg);
    background-color: white;
  }

  .faq-item:hover {
    box-shadow: var(--shadow-sm);
  }

  .faq-item summary {
    list-style: none;
    cursor: pointer;
  }

  .faq-item summary::-webkit-details-marker {
    display: none;
  }

  .faq-item summary:focus {
    outline: 2px solid var(--color-text-offset);
    outline-offset: 2px;
  }

  .plus-sign {
    transition: transform 0.3s ease-in-out;
  }

  .faq-item[open] .plus-sign {
    transform: rotate(45deg);
  }

  .answer p {
    margin: 0;
  }

  .answer {
    opacity: 0;
    transform: translateY(-10px);
    visibility: hidden;
  }

  @keyframes open {
    0% { 
      opacity: 0;
      transform: translateY(-10px);
      visibility: visible;
    }
    100% { 
      opacity: 1;
      transform: translateY(0);
      visibility: visible;
    }
  }

  @keyframes close {
    0% { 
      opacity: 1;
      transform: translateY(0);
      visibility: visible;
    }
    100% { 
      opacity: 0;
      transform: translateY(-10px);
      visibility: hidden;
    }
  }

  .faq-item[open] .answer {
    animation: open 0.3s ease-in-out forwards;
  }

  .faq-item.closing .answer {
    animation: close 0.3s ease-in-out forwards;
  }
</style>


