---
interface Props {
  navItems?: Array<{
    text: string;
    url: string;
  }>;
}

const { navItems = [
  { text: "Sobre nosotros", url: "/#sobre-nosotros" },
  { text: "Precios", url: "/#precios" },
  { text: "Preguntas frecuentes", url: "/#faq" }
] } = Astro.props;
---

<header class="bg-white/80 backdrop-blur-md border-b border-default fixed w-full top-0 z-50 h-[60px] sm:h-[76px]">
  <div class="max-w-7xl mx-auto h-full grid grid-cols-3 items-center px-4 sm:px-8">
    <!-- Logo: centrado en móvil, izquierda en desktop -->
    <div class="col-start-2 sm:col-start-1 flex justify-center sm:justify-start">
      <a href="/" class="hover:opacity-80 transition-opacity flex items-center gap-3">
        <img src="/frappe_icon.svg" alt="Icono de Frappé" class="h-8 sm:h-10 object-contain" />
        <img src="/frappe_text.svg" alt="Frappé" class="hidden sm:block h-8 sm:h-10 object-contain" />
      </a>
    </div>
    <!-- Menú: derecha siempre -->
    <div class="col-start-3 flex justify-end">
      <nav class="h-full flex items-center">
        <button class="sm:hidden text-2xl p-2 text-default">☰</button>
        <ul class="hidden sm:flex text-sm gap-8 font-medium font-sans h-full items-center">
          {navItems.map((item) => (
            <li>
              <a href={item.url} class="text-default hover:text-secondary transition-colors whitespace-nowrap">
                {item.text}
              </a>
            </li>
          ))}
        </ul>
      </nav>
    </div>
  </div>

  <!-- Menú móvil -->
  <div class="mobile-menu hidden fixed top-[60px] min-h-[calc(33vh-60px)] left-0 w-full bg-white sm:hidden z-50">
    <ul class="flex flex-col text-sm font-bold font-sans p-4">
      {navItems.map((item) => (
        <li class="py-2">
          <a href={item.url} class="hover:text-primary transition-colors" style="
            border-bottom: var(--border-brutal);
          ">{item.text}</a>
        </li>
      ))}
    </ul>
  </div>
</header>

<script>
  const menuButton = document.querySelector('button');
  const mobileMenu = document.querySelector('.mobile-menu');

  menuButton?.addEventListener('click', (e) => {
    e.stopPropagation();
    mobileMenu?.classList.toggle('hidden');
  });

  // Cerrar menú al hacer click en un enlace
  const menuLinks = mobileMenu?.querySelectorAll('a');
  menuLinks?.forEach(link => {
    link.addEventListener('click', () => {
      mobileMenu?.classList.add('hidden');
    });
  });

  // Cerrar menú al hacer click fuera
  document.addEventListener('click', (e) => {
    if (!mobileMenu?.contains(e.target as Node) && !menuButton?.contains(e.target as Node)) {
      mobileMenu?.classList.add('hidden');
    }
  });
</script> 