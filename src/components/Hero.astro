---
import ContactForm from "./ContactForm.astro";

interface Props {
  title?: string;
  description?: string;
}

const {
  title = "Agencia de desarrollo web",
  description = "Creamos páginas web personalizadas para profesionales, autónomos y pequeñas empresas. Desarrollamos sitios web de alto rendimiento que impulsan el crecimiento de tu negocio.",
} = Astro.props;

const FORM_ENDPOINT = "https://formspree.io/f/mjkglyjd";
---

<div id="hero" class="mt-[60px] sm:mt-[76px] min-h-[calc(100vh-60px)] sm:min-h-[calc(100vh-76px)] py-6 sm:py-16 flex items-center">
  <div class="max-w-7xl mx-auto grid grid-cols-1 lg:grid-cols-2 gap-6 lg:gap-16 items-center px-4 sm:px-8">
    <div class="text-center lg:text-left">
      <div class="flex justify-center lg:justify-start">
        <img src="/frappe_text.svg" alt="Frappé" class="h-10 sm:h-24 mb-2 sm:mb-4" />
      </div>
      <h1 class="text-lg sm:text-2xl font-medium mb-3 sm:mb-6 text-[var(--color-text)] font-mono">
        {title}
      </h1>
      <p class="text-sm sm:text-lg max-w-2xl mx-auto lg:mx-0 text-[var(--color-text)] leading-relaxed font-sans">
        {description}
      </p>
    </div>
    
    <ContactForm formId="heroForm" />
  </div>
</div>

<script>
  const heroForm = document.getElementById('heroForm') as HTMLFormElement;
  const heroSubmitButton = document.getElementById('heroSubmitButton') as HTMLButtonElement;
  const heroRequiredInputs = heroForm?.querySelectorAll('input[required], textarea[required]');

  // Deshabilitar el botón inicialmente
  if (heroSubmitButton) {
    heroSubmitButton.disabled = true;
  }

  // Función para verificar que todos los campos requeridos estén completos
  function checkHeroFormValidity() {
    if (!heroRequiredInputs) return false;
    return Array.from(heroRequiredInputs).every(input => (input as HTMLInputElement).value.trim() !== '');
  }

  // Validar en tiempo real
  heroRequiredInputs?.forEach(input => {
    input.addEventListener('input', () => {
      if (heroSubmitButton) {
        heroSubmitButton.disabled = !checkHeroFormValidity();
      }
    });
  });

  // Manejar envío del formulario
  heroForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    heroSubmitButton.disabled = true;
    heroSubmitButton.textContent = 'Enviando...';

    try {
      const formData = new FormData(heroForm);
      const response = await fetch(heroForm.action, {
        method: 'POST',
        body: formData,
        headers: {
          'Accept': 'application/json'
        }
      });

      if (!response.ok) {
        const data = await response.json();
        throw new Error(`Error al enviar el formulario: ${data.error || response.statusText}`);
      }

      const data = await response.json();

      if (data.ok) {
        heroForm.reset();
        document.getElementById('successModal')?.classList.remove('hidden');
        // Mantener el botón deshabilitado después de un envío exitoso
        heroSubmitButton.disabled = true;
        // @ts-ignore
        window.dataLayer?.push({
          event: 'form_submit',
          form_name: 'hero_form',
          form_status: 'success'
        });
      } else {
        throw new Error('Error al enviar el formulario');
      }
    } catch (error) {
      console.error('Error:', error);
      document.getElementById('errorModal')?.classList.remove('hidden');
      // En caso de error, habilitar el botón para reintentar
      heroSubmitButton.disabled = false;
      // @ts-ignore
      window.dataLayer?.push({
        event: 'form_submit',
        form_name: 'hero_form',
        form_status: 'error'
      });
    } finally {
      heroSubmitButton.textContent = 'Enviar';
    }
  });
</script> 